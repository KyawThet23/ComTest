package com.mit.first.service.impl;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mit.first.ds.Customer;
import com.mit.first.ds.Order;
import com.mit.first.ds.OrderedItem;
import com.mit.first.payload.NewOrderItem;
import com.mit.first.payload.OrderResponse;
import com.mit.first.payload.PlaceOrder;
import com.mit.first.repository.OrderRepo;
import com.mit.first.service.OrderService;

import jakarta.persistence.EntityNotFoundException;

import com.mit.first.repository.CutomerRepository;
import com.mit.first.repository.OrderItemRepository;

@Service
public class OrderServiceImpl implements OrderService{

	@Autowired
	private OrderRepo repo;
	@Autowired
	private CutomerRepository customRepo;
	@Autowired
	private OrderItemRepository itemRepo;
	@Autowired
	private ObjectMapper objectMapper;
	
	
	private String generateOrderId(){
		
		UUID uuid = UUID.randomUUID();
		String code = String.format("%03d", Math.abs(uuid.getLeastSignificantBits() % 1000));
		return code;
    }
	
	@Override
	@Transactional
	public void placeOrder(PlaceOrder request) {
		
		Order order = request.getOrder();
		order.setCode(generateOrderId());
		order.setOrderDate(LocalDate.now());
		
		List<OrderedItem> items = request.getOrderItems();
		items.forEach(item -> order.addOrderItem(item));
		
		Customer customer = request.getCustomer();
		customer.addOrder(order);
		
		customRepo.save(customer);
		
	}

	@Override
	public void deleteById(int id) {
		
		
		repo.deleteById(id);
	}

	
	private boolean exists (int productId,int orderId) {
		Optional<OrderedItem> item = itemRepo.findItem(productId, orderId);
		return item.isPresent();
	}
	
	@Override
	public void addOrderedItem(int id, NewOrderItem request) {
		
		Order order = repo.findById(id)
						.orElseThrow(EntityNotFoundException::new);
		
		float total = request.getTotalPrice();
		int qty = request.getTotalQty();
		List<OrderedItem> items = request.getItems();
		
		order.setTotalPrice(total);
		order.setTotalQty(qty);
		
		items.forEach(item -> {
					if (exists(item.getProductId(), order.getId())) {
						
						OrderedItem product = itemRepo
									.findItem(item.getProductId(), order.getId())
									.orElseThrow(EntityNotFoundException::new);
						System.out.println(product);
						int toTal = item.getQuantity() + product.getQuantity();
						
						product.setQuantity(toTal);
						itemRepo.save(product);
						
					} else {
						order.addOrderItem(item);
					}
		});
		
		repo.save(order);
		
	}
	
	@Override
	public void deleteOrderedItem(int orderId,int itemId,float subTotal) {
		
		Order order = repo.findById(orderId).orElseThrow();
		
		OrderedItem item = itemRepo.findById(itemId).orElseThrow();
		
		int total = order.getTotalQty() - item.getQuantity();
		float totalPrice = order.getTotalPrice() - subTotal;
		
		order.setTotalQty(total);
		order.setTotalPrice(totalPrice);
		
		repo.save(order);
		itemRepo.deleteById(itemId);
		
	}

	@SuppressWarnings("unchecked") @Override 
	public List<OrderResponse> getAll() {
		
		 List<Object[]> results =  repo.getAllOrderWithCustomer();
		 
		 List<OrderResponse> list = new ArrayList<>();
		 
		 for (Object[] result : results) {
			 
			 String name = (String) result[0];
	         Map<String, Object> orderMap = (Map<String, Object>) result[1];
	         
	         OrderResponse dto = new OrderResponse();
	         dto.setName(name);
	         dto.setId( (int) orderMap.get("id"));
	         dto.setCode((String) orderMap.get("code"));
	         dto.setOrderDate(parseLocalDate((List<Integer>) orderMap.get("orderDate")));
	         dto.setTotalPrice((double) orderMap.get("totalPrice"));
	         dto.setTotalQty((int) orderMap.get("totalQty"));
	         dto.setLastDate(parseLocalDate((List<Integer>) orderMap.get("lastDate")));
	         
	         list.add(dto);
		 }
		 
		 return list;
	}
	
	private LocalDate parseLocalDate(List<Integer> dateList) {
        int year = dateList.get(0);
        int month = dateList.get(1);
        int day = dateList.get(2);
        return LocalDate.of(year, month, day);
    }
	
	
}


