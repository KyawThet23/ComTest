package com.mit.first.service.impl;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mit.first.ds.Customer;
import com.mit.first.ds.Order;
import com.mit.first.ds.OrderedItem;
import com.mit.first.payload.NewOrderItem;
import com.mit.first.payload.PlaceOrder;
import com.mit.first.repository.OrderRepo;
import com.mit.first.service.OrderService;
import com.mit.first.repository.CutomerRepository;
import com.mit.first.repository.OrderItemRepository;

@Service
public class OrderServiceImpl implements OrderService{

	@Autowired
	private OrderRepo repo;
	@Autowired
	private CutomerRepository customRepo;
	@Autowired
	private OrderItemRepository itemRepo;
	
	
	private String generateOrderId(){
		
		UUID uuid = UUID.randomUUID();
		String code = String.format("%03d", Math.abs(uuid.getLeastSignificantBits() % 1000));
		return code;
    }
	
	@Override
	@Transactional
	public void placeOrder(PlaceOrder request) {
		
		Order order = request.getOrder();
		order.setCode(generateOrderId());
		order.setOrderDate(LocalDate.now());
		
		List<OrderedItem> items = request.getOrderItems();
		items.forEach(item -> order.addOrderItem(item));
		
		Customer customer = request.getCustomer();
		customer.addOrder(order);
		
		customRepo.save(customer);
		
	}

	@Override
	public void deleteById(int id) {
		
		
		repo.deleteById(id);
	}


	@Override
	public void addOrderedItem(int id, NewOrderItem request) {
		
		Order order = repo.findById(id).orElseThrow();
		
		float total = request.getTotalPrice();
		int qty = request.getTotalQty();
		List<OrderedItem> items = request.getItems();
		
		order.setTotalPrice(total);
		order.setTotalQty(qty);
		items.forEach(item -> order.addOrderItem(item));
		
		repo.save(order);
		
	}
	
	@Override
	public void deleteOrderedItem(int orderId,int itemId) {
		
		Order order = repo.findById(orderId).orElseThrow();
		
		OrderedItem item = itemRepo.findById(itemId).orElseThrow();
		
		int total = order.getTotalQty() - item.getQuantity();
		
		order.setTotalQty(total);
		
		repo.save(order);
		itemRepo.deleteById(itemId);
		
	}
	
}


